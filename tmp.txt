import os
from google.cloud import pubsub_v1

RUN_LOCAL=True

if RUN_LOCAL:
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "./GCDE-029b2d19307d_my_dev_acc.json"
    os.environ["GOOGLE_CLOUD_PROJECT"] = "gcde-10000"

subscriber = pubsub_v1.SubscriberClient()
topic_name = 'projects/{project_id}/topics/{topic}'.format(
    project_id=os.getenv('GOOGLE_CLOUD_PROJECT'),
    topic='iotcore-topic',  # Set this to something appropriate.
)

subscription_name = 'projects/{project_id}/subscriptions/{sub}'.format(
    project_id=os.getenv('GOOGLE_CLOUD_PROJECT'),
    sub='iotcore-subscription',  # Set this to something appropriate.
)

# Create subscriber if not exit
#subscriber.create_subscription(
#    name=subscription_name, topic=topic_name)

def callback(message):
    print(message.data)
    message.ack()

future = subscriber.subscribe(subscription_name, callback)

# The future returned by the call to subscriber.subscribe can be used to
# block the current thread until a given condition obtains
try:
    future.result()
except KeyboardInterrupt:
    future.cancel()
    
/**
 * Copyright 2017, Google, Inc.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';
const http = require('http')
const port = 3001
//  export GOOGLE_APPLICATION_CREDENTIALS=/home/git/work/gcp/keys/dev_auth.json
// [START pubsub_quickstart_create_topic]
// Imports the Google Cloud client library
const {PubSub} = require('@google-cloud/pubsub');

async function publish_data(projectId = 'gcp_project_id', topicName = 'gcp_cloud_pub/sub', json_data = '') {
    // Instantiates a client
    const pubsub = new PubSub({projectId});
    const topic = pubsub.topic(topicName);
    const data = Buffer.from(json_data);

    // topic.publish(data, attributes, callback);
    topic.publish(data, (err, messageId) => {
        if (err) {
          console.log("got error: " + err);
        } else {
            console.log(messageId);
        }
    });
}
// [END pubsub_quickstart_create_topic]

function requestHandler(request, response) {
    const { headers, method, url } = request;
    let body = [];
    request.on('error', (err) => {
        console.error(err);
    }).on('data', (chunk) => {
        body.push(chunk);
    }).on('end', () => {
        // BEGINNING OF NEW STUFF
        console.log("method: " + method);
        // create reponse message
        response.on('error', (err) => {
            console.error('send reponse error: ' + err);
        });
        response.statusCode = 200;
        response.setHeader('Content-Type', 'application/json');
        // Note: the 2 lines above could be replaced with this next one:
        // response.writeHead(200, {'Content-Type': 'application/json'})

        let responseBody = { headers, method, url, body };

        if (method === 'POST') {
            body = Buffer.concat(body).toString();
            try {
                JSON.parse(body);
                publish_data('gcde-10000', 'iotcore-topic', body).catch(console.error);
                responseBody = {
                    "msg": "OK",
                };
            } catch (e) {
                console.log("body is not json format, body: " + body);
                responseBody = {
                    "msg": "Json parse error",
                };
            }
        } else {
            // just repone simple msg
            responseBody = {
                "msg": "Please using POST request with JSON data format",
            };
        }
        // reponse msg
        response.write(JSON.stringify(responseBody));
        response.end();
        // Note: the 2 lines above could be replaced with this next one:
        // response.end(JSON.stringify(responseBody))
        // END OF NEW STUFF
    });
}

function server_http() {
         
    const server = http.createServer(requestHandler);
      
    server.listen(port, (err) => {
        if (err) {
          return console.log('something bad happened', err)
        }
      
        console.log(`server is listening on ${port}`)
    });
}
function main() {
    // publish_data('gcde-10000', 'iotcore-topic').catch(console.error);
    server_http()
}
const args = process.argv.slice(2);
main(...args);




